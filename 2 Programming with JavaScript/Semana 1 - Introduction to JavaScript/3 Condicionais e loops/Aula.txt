Condicionais e loops

---------------Declarações escritas

True or False

if
    A instrução verifica uma condição e executará um bloco de código se a condição for atendida ou verdadeira.
if (condition == true) {
    //Execute code
}

Alguns dos operadores de comparação que podem ser usados ==, >, <, !=

------------Trabalhar com instruções Condicionais

if else
    Pode ser usada quando você deseja executar código com base em uma determinada condição sendo verdadeira ou falsa.

    var result = 50;
    if ( result > 40) {
        console.log("Congrulations you passed.");
    } else {
        console.log("Unfortunately you did not pass.");
    }

ELSE IF and SWITCH statements

    Em geral, o site if else é mais adequado se houver uma opção binária na condição.

    Por exemplo, em inglês simples:se estiver ensolarado, use óculos escuros. Caso contrário, não use.

    Nesse caso, usar uma instrução if é uma escolha óbvia.

Quando há um número menor de resultados possíveis de verificações de veracidade, ainda é possível usar uma declaração if else, como:

if(light == "green") {
    console.log("Drive")
} else if (light == "orange") {
    console.log("Get ready")
} else if (light == "red") {
    console.log("Dont' drive")
} else {
    //this block will run if no condition matches
    console.log("The light is not green, orange, or red");
}

No entanto, se houver muitos resultados possíveis, a melhor prática é usar uma instrução switch porque é mais fácil e menos prolixo. Por ser mais fácil de ler, é mais fácil seguir a lógica e, assim, reduzir a carga cognitiva da leitura de várias condições

    No entanto, essa não é uma regra rígida. É simplesmente uma escolha estilística.

//converting the previous if-else example with switch-case
switch(light) {
   case 'green':
       console.log("Drive");
       break;
   case 'orange':
       console.log("Get ready");
       break;
   case 'red':
       console.log("Don't drive");
       break;
   default:
       //this block will run if no condition matches
       console.log('The light is not green, orange, or red');
       break;
}

--------Construções de looping

Incrementador ou contador de loop

O contador na programação, sempre é caracterizado com a letra i

Existem outros loops
    FOR WHILE NESTED

FOR
    for (var i = 1; i < 4; i++) {
        console.log(i);
    }

WHILE

    var i = 1;

    while ( i < 4) {
        console.log(i);
        i = i + 1;
    }

-------Loop for

Exemplo demonstrado em vídeo

-------Loop WHILE

Exemplo demonstrado em vídeo


--------Loops aninhados

JavaScript nested loop

for ( var i = 1; i <= 2; i++) {
    for (var j = 1; j <= 5; j++) {
        console.log("Week " + i + " day " + j);
    }
}

------- Loops e lopps aninhados

//single loop
for (var firstNum = 0; firstNum < 2; firstNum++) {
    console.log(firstNum);
}

Resultado:
0
1

Agora é o momento de combinar o primeiro e o segundo loop:

//nested loops - one inside another
for (var firstNum = 0; firstNum < 2; firstNum++) {
    for (var secondNum = 0; secondNum < 10; secondNum++) {
        console.log(firstNum + ", " + secondNum);
    }
}

Resultado:
0, 0
0, 1
0, 2
0, 3
0, 4
0, 5
0, 6
0, 7
0, 8
0, 9
1, 0
1, 1
1, 2
1, 3
1, 4
1, 5
1, 6
1, 7
1, 8
1, 9

Agora que tenho uma lista de todos os números que serão multiplicados, ter o resultado real dessa multiplicação é tão fácil quanto atualizar a chamadaconsole.log():

//nested loops - one inside another
for (var firstNum = 0; firstNum < 2; firstNum++) {
    for (var secondNum = 0; secondNum < 10; secondNum++) {
        console.log(firstNum + " times " + secondNum + " equals " + firstNum * secondNum);
    }
}

Resultado: 
O resultado agora é:

0 vezes 0 é igual a 0
0 vezes 1 é igual a 0
0 vezes 2 é igual a 0
0 vezes 3 é igual a 0
0 vezes 4 é igual a 0
0 vezes 5 é igual a 0
0 vezes 6 é igual a 0
0 vezes 7 é igual a 0
0 vezes 8 é igual a 0
0 vezes 9 é igual a 0
1 vez 0 é igual a 0
1 vez 1 é igual a 1
1 vez 2 é igual a 2
1 vez 3 é igual a 3
1 vez 4 é igual a 4
1 vez 5 é igual a 5
1 vez 6 é igual a 6
1 vez 7 é igual a 7
1 vez 8 é igual a 8
1 vez 9 é igual a 9

Isso gera algumas combinações muito interessantes.

Por exemplo, posso criar uma tabela de divisão personalizada:

//nested loops - one inside another 
for (var i = 100; i > 10; i = i - 10) {
    for (var j = 10; j > 4; j = j - 5) {
        console.log(i + " divided by " + j + " equals " + i / j);
    }
}

Resultado:

Aqui está o resultado do loop aninhado acima:

100 dividido por 10 é igual a 10
100 dividido por 5 é igual a 20
90 dividido por 10 é igual a 9
90 dividido por 5 é igual a 18
80 dividido por 10 é igual a 8
80 dividido por 5 é igual a 16
70 dividido por 10 é igual a 7
70 dividido por 5 é igual a 14
60 dividido por 10 é igual a 6
60 dividido por 5 é igual a 12
50 dividido por 10 é igual a 5
50 dividido por 5 é igual a 10
40 dividido por 10 é igual a 4
40 dividido por 5 é igual a 8
30 dividido por 10 é igual a 3
30 dividido por 5 é igual a 6
20 dividido por 10 é igual a 2
20 dividido por 5 é igual a 4


---------Usos dos loops

Nesta leitura, discutiremos, em um nível muito alto, os motivos para usar loops em JavaScript.

Observe que manteremos essa discussão em alto nível porque há várias "peças do quebra-cabeça" que ainda não foram compreendidas pelo senhor neste momento.

É por isso que não vamos nos prender a detalhes de sintaxe e implementação, mas simplesmente discutir como e por que os loops são usados no trabalho diário dos desenvolvedores de JavaScript.

Considere o seguinte exemplo: O senhor trabalha como desenvolvedor de uma loja on-line.

A loja vende cubos com letras para crianças pequenas e toda a seção "Shop now" do site é organizada em um layout em que cada cubo à venda é exibido em um componente de cartão simples, com uma imagem do cubo, a letra que ele ensina, uma breve descrição e o preço.

Os cartões são organizados em linhas, de modo que cada linha contém três cartões - três letras diferentes.

Cada cartão é uma prévia do cubo com a letra específica que está à venda, além de ser um link para uma página inteira, dedicada a fornecer mais informações sobre os cubos, seu valor didático e uma maneira de o visitante concluir o processo de pagamento.

Agora, uma pergunta rápida: onde os loops se encaixariam na exibição dessa grade de cartões que mostram os cubos de letras à venda?

Para entender como isso funciona, deixe-me codificar um protótipo básico de como isso poderia funcionar.

Como o senhor ainda não tem conhecimento suficiente para exibir layouts de sites no navegador com a ajuda do JavaScript, por enquanto terei de me contentar em usar uma string simples e o console.

Ainda assim, esse exercício deve ser divertido.

var cubes = 'ABCDEFG';
//styling console output using CSS with a %c format specifier
for (var i = 0; i < cubes.length; i++) {
    var styles = "font-size: 40px; border-radius: 10px; border: 1px solid blue; background: pink; color: purple";
    console.log("%c" + cubes[i], styles)
}

Resultado:
A
B
C
D
E
F
G

Observação: para que os estilos sejam aplicados, tente executar esse trecho de código no console do navegador.

É isso, com esse código simples, a saída no console mostra cada letra em uma linha separada, com o estilo de um cubo de letras para crianças pequenas.

O código em si deve ser bastante familiar, exceto pela sintaxecubes.length ecubes[i].

Sem entrar em muitos detalhes, aqui estão os dois trechos de código explicados da forma mais simples possível.

Ocubes.length retorna um número. Comocubes é uma cadeia de caracteres, ocubes.length me dá o comprimento da cadeia salva na variável.

Portanto, isso me dá o número 7, fazendo com que meu loop for se pareça com o seguinte:

var cubes = 'ABCDEFG';
//styling console output using CSS with a %c format specifier
for (var i = 0; i < 7; i++) {
    var styles = "font-size: 40px; border-radius: 10px; border: 1px solid blue; background: pink; color: purple";
    console.log("%c" + cubes[i], styles)
}

A segunda parte do código que é nova aqui é o snippetcubes[i].

Isso simplesmente direciona cada letra individual no loop, com base no valor atual da variáveli.

Em outras palavras,cubes[i], quandoi é igual a0, é:A.

Então,cubes[i], quandoi é igual a1, é:B.

Isso continua por quantos loops meu loop for executar - e isso é determinado pelo valorcubes.length.

Também é muito versátil, pois, se eu, por exemplo, decidisse alterar o comprimento da cadeiacubes, não precisaria atualizar a condição dei < cubes.length, pois ela é atualizada automaticamente quando altero o comprimento da cadeiacubes.

Há outras maneiras de armazenar dados em aplicativos JavaScript que o senhor ainda não conhece.

Mas podemos usar a mesma abordagem com esses outros tipos de dados para obter resultados que funcionam essencialmente com o mesmo princípio que o descrito acima.

O uso de loops é a essência da abordagem adotada no desenvolvimento de muitas peças diferentes de funcionalidade em software atualmente.

Alguns exemplos adicionais
Se eu estiver programando um cliente de e-mail, obterei alguns dados estruturados sobre os e-mails a serem exibidos na caixa de entrada e, em seguida, usarei um loop para realmente exibi-los de maneira bem formatada.

Se eu estiver programando um site de comércio eletrônico que vende carros, obterei uma fonte de dados bem estruturados sobre cada um dos carros e, em seguida, farei um loop sobre esses dados para exibi-los na tela.

Se eu estiver programando um calendário on-line, farei um loop sobre os dados contidos em cada um dos dias para exibir um calendário bem formatado.

Há muitos outros exemplos de uso de loops no código.

O uso de loops com dados formatados adequadamente para uma determinada tarefa é um componente crucial da criação de software.

Nas lições a seguir, aprenderemos sobre diferentes maneiras de agrupar dados relacionados e de exibi-los na tela usando JavaScript.

Quando combinado com o que o senhor já aprendeu sobre loops, isso lhe dá as habilidades para criar vários tipos de interfaces de usuário em que há informações repetitivas.

Alguns exemplos mais específicos incluem:

fazer um loop sobre os títulos de posts de blogs em alguns dados estruturados e exibir cada título de post de blog em uma página inicial de blog

looping sobre postagens de mídia social em alguns dados estruturados e exibição de cada postagem de mídia social com base em algumas condições

fazer looping em alguns dados estruturados sobre roupas disponíveis para venda em uma loja de roupas on-line e exibir dados relevantes para cada item de roupa

Agora o senhor entende a importância de saber como trabalhar com loops em JavaScript. Nas próximas lições, aprenderemos outras informações relevantes que permitirão que o senhor faça isso.

--------- Loop While

Exercicios feitos no arquivo loopForWhile

--------Loops aninhados

Se você precisar que seu código execute mais de uma tarefa ao mesmo tempo, como:
    Procesar o conjunto de dados A
        Mas ao mesmo tempo também processar o conjunto de dados B

Quanto mais loops aninhados o código tiver, mais lento ele irá carregar

Digamos que eu queira gerar uma tabela de multiplicação personalizada.

Esse é um cenário de caso de uso perfeito para loops aninhados.

A variável de contador do loop externo atuará como o primeiro número a ser multiplicado, e a variável de contador do loop interno atuará como o segundo número a ser multiplicado.

Aqui está o meu código:

//single loop
for (var firstNum = 0; firstNum < 2; firstNum++) {
    console.log(firstNum);
}

O resultado do código acima será:

0
1

Isso significa que meu loop for começa em 0 e para depois de 1.

Portanto, agora posso codificar o que mais tarde se tornará o loop interno, cuja variável de contador será o segundo número nessa multiplicação:

Dessa vez, o resultado é:

0
1
2
3
4
5
6
7
8
9

Agora é o momento de combinar o primeiro e o segundo loop:

//nested loops - one inside another
for (var firstNum = 0; firstNum < 2; firstNum++) {
    for (var secondNum = 0; secondNum < 10; secondNum++) {
        console.log(firstNum + ", " + secondNum);
    }
}

Agora que estou aninhando o segundo loop for dentro do primeiro e que estou registrando no console os valores de ambas as variáveis de contador à medida que os loops progridem, o resultado fica assim:

0, 0
0, 1
0, 2
0, 3
0, 4
0, 5
0, 6
0, 7
0, 8
0, 9
1, 0
1, 1
1, 2
1, 3
1, 4
1, 5
1, 6
1, 7
1, 8
1, 9

Agora que tenho uma lista de todos os números que serão multiplicados, ter o resultado real dessa multiplicação é tão fácil quanto atualizar a chamadaconsole.log():

//nested loops - one inside another
for (var firstNum = 0; firstNum < 2; firstNum++) {
    for (var secondNum = 0; secondNum < 10; secondNum++) {
        console.log(firstNum + " times " + secondNum + " equals " + firstNum * secondNum);
    }
}

O resultado agora é:

0 vezes 0 é igual a 0
0 vezes 1 é igual a 0
0 vezes 2 é igual a 0
0 vezes 3 é igual a 0
0 vezes 4 é igual a 0
0 vezes 5 é igual a 0
0 vezes 6 é igual a 0
0 vezes 7 é igual a 0
0 vezes 8 é igual a 0
0 vezes 9 é igual a 0
1 vez 0 é igual a 0
1 vez 1 é igual a 1
1 vez 2 é igual a 2
1 vez 3 é igual a 3
1 vez 4 é igual a 4
1 vez 5 é igual a 5
1 vez 6 é igual a 6
1 vez 7 é igual a 7
1 vez 8 é igual a 8
1 vez 9 é igual a 9

Isso gera algumas combinações muito interessantes.

Por exemplo, posso criar uma tabela de divisão personalizada:

//nested loops - one inside another 
for (var i = 100; i > 10; i = i - 10) {
    for (var j = 10; j > 4; j = j - 5) {
        console.log(i + " divided by " + j + " equals " + i / j);
    }
}

Aqui está o resultado do loop aninhado acima:

100 dividido por 10 é igual a 10
100 dividido por 5 é igual a 20
90 dividido por 10 é igual a 9
90 dividido por 5 é igual a 18
80 dividido por 10 é igual a 8
80 dividido por 5 é igual a 16
70 dividido por 10 é igual a 7
70 dividido por 5 é igual a 14
60 dividido por 10 é igual a 6
60 dividido por 5 é igual a 12
50 dividido por 10 é igual a 5
50 dividido por 5 é igual a 10
40 dividido por 10 é igual a 4
40 dividido por 5 é igual a 8
30 dividido por 10 é igual a 3
30 dividido por 5 é igual a 6
20 dividido por 10 é igual a 2
20 dividido por 5 é igual a 4

Fique à vontade para experimentar outras combinações de iterações de loop aninhado e veja que tipo de resultado o senhor obterá.

Aqui está uma lista de recursos que podem ser úteis para o senhor continuar sua jornada de aprendizado.

Operadores de comparação
https://www.javascripttutorial.net/javascript-comparison-operators/

Truthy
https://developer.mozilla.org/en-US/docs/Glossary/Truthy

Falsos
https://developer.mozilla.org/en-US/docs/Glossary/Falsy

Declarações condicionais
https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals

Em JavaScript, há também uma versão abreviada para escrever uma instrução condicional, conhecida como operador condicional (ternário):
Operador condicional (ternário)

  